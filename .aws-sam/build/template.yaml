AWSTemplateFormatVersion: 2010-09-09
Description: sample-2
Transform:
- AWS::Serverless-2016-10-31
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    Properties:
      UserPoolName: auth_pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 4
      IdTokenValidity: 8
      RefreshTokenValidity: 1
      AllowedOAuthFlows:
      - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - openid
      - email
      ClientName: demoProject
      GenerateSecret: true
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Fn::Join:
        - '-'
        - - Ref: AWS::AccountId
          - auth
      UserPoolId:
        Ref: CognitoUserPool
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
      - Fn::GetAtt:
        - CognitoUserPool
        - Arn
      RestApiId:
        Ref: ApiGatewayApi
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ..\..\proxy-api.yml
      StageName: prod
      Variables:
        ServerlessExpressLambdaFunctionName:
          Ref: DemoAPIFunctions
        CognitoArn:
          Fn::GetAtt:
          - CognitoUserPool
          - Arn
  DemoAPIFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ./src/index.handle
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
      - Statement:
          Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:BatchGetItem
          - sns:Publish
          - states:*
          Resource: '*'
      Environment:
        Variables:
          REGION: us-east-1
          TABLE_NAME_CUSTOMER: customer
          TABLE_NAME_VEHICLE: vehicle
          TABLE_NAME_VEHICLE_IMAGE: vehicle_upload_image
          TABLE_NAME_LOAN: Loan
          TABLE_NAME_RENTLE_VEHICLE: rental_vehical
          TABLE_NAME_ACCESSORIES: vehical_accessories
          TABLE_NAME_VEHICLE_BRAND: vehicle_brand
          TABLE_NAME_VEHICLE_MODEL: vehicle_model
      Events:
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
      CodeUri: DemoAPIFunctions
    Metadata:
      SamResourceId: DemoAPIFunctions
Outputs:
  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: ApiGatewayApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/prod/
